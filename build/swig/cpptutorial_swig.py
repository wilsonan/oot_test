# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cpptutorial_swig', [dirname(__file__)])
        except ImportError:
            import _cpptutorial_swig
            return _cpptutorial_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_cpptutorial_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cpptutorial_swig = swig_import_helper()
    del swig_import_helper
else:
    import _cpptutorial_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _cpptutorial_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _cpptutorial_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _cpptutorial_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _cpptutorial_swig.high_res_timer_epoch()
class myqpskdemod_cb(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(bool gray_code) -> myqpskdemod_cb_sptr

        Return a shared_ptr to a new instance of cpptutorial::myqpskdemod_cb.

        To avoid accidental use of raw pointers, cpptutorial::myqpskdemod_cb's constructor is in a private implementation class. cpptutorial::myqpskdemod_cb::make is the public interface for creating new instances.

        Params: (gray_code)
        """
        return _cpptutorial_swig.myqpskdemod_cb_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _cpptutorial_swig.delete_myqpskdemod_cb
    __del__ = lambda self : None;
myqpskdemod_cb_swigregister = _cpptutorial_swig.myqpskdemod_cb_swigregister
myqpskdemod_cb_swigregister(myqpskdemod_cb)

def myqpskdemod_cb_make(*args, **kwargs):
  """
    myqpskdemod_cb_make(bool gray_code) -> myqpskdemod_cb_sptr

    Return a shared_ptr to a new instance of cpptutorial::myqpskdemod_cb.

    To avoid accidental use of raw pointers, cpptutorial::myqpskdemod_cb's constructor is in a private implementation class. cpptutorial::myqpskdemod_cb::make is the public interface for creating new instances.

    Params: (gray_code)
    """
  return _cpptutorial_swig.myqpskdemod_cb_make(*args, **kwargs)

class myqpskdemod_cb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::cpptutorial::myqpskdemod_cb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::cpptutorial::myqpskdemod_cb)> self) -> myqpskdemod_cb_sptr
        __init__(boost::shared_ptr<(gr::cpptutorial::myqpskdemod_cb)> self, myqpskdemod_cb p) -> myqpskdemod_cb_sptr
        """
        this = _cpptutorial_swig.new_myqpskdemod_cb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(myqpskdemod_cb_sptr self) -> myqpskdemod_cb"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr___deref__(self)

    __swig_destroy__ = _cpptutorial_swig.delete_myqpskdemod_cb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(myqpskdemod_cb_sptr self, bool gray_code) -> myqpskdemod_cb_sptr

        Return a shared_ptr to a new instance of cpptutorial::myqpskdemod_cb.

        To avoid accidental use of raw pointers, cpptutorial::myqpskdemod_cb's constructor is in a private implementation class. cpptutorial::myqpskdemod_cb::make is the public interface for creating new instances.

        Params: (gray_code)
        """
        return _cpptutorial_swig.myqpskdemod_cb_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(myqpskdemod_cb_sptr self) -> unsigned int"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(myqpskdemod_cb_sptr self, int which, int delay)
        declare_sample_delay(myqpskdemod_cb_sptr self, unsigned int delay)
        """
        return _cpptutorial_swig.myqpskdemod_cb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(myqpskdemod_cb_sptr self, int which) -> unsigned int"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(myqpskdemod_cb_sptr self) -> int"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(myqpskdemod_cb_sptr self) -> double"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_relative_rate(self)

    def start(self):
        """start(myqpskdemod_cb_sptr self) -> bool"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_start(self)

    def stop(self):
        """stop(myqpskdemod_cb_sptr self) -> bool"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(myqpskdemod_cb_sptr self, unsigned int which_input) -> uint64_t"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(myqpskdemod_cb_sptr self, unsigned int which_output) -> uint64_t"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(myqpskdemod_cb_sptr self) -> int"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(myqpskdemod_cb_sptr self, int m)"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(myqpskdemod_cb_sptr self)"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(myqpskdemod_cb_sptr self) -> bool"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(myqpskdemod_cb_sptr self, int m)"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(myqpskdemod_cb_sptr self) -> int"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(myqpskdemod_cb_sptr self, int i) -> long"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(myqpskdemod_cb_sptr self, long max_output_buffer)
        set_max_output_buffer(myqpskdemod_cb_sptr self, int port, long max_output_buffer)
        """
        return _cpptutorial_swig.myqpskdemod_cb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(myqpskdemod_cb_sptr self, int i) -> long"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(myqpskdemod_cb_sptr self, long min_output_buffer)
        set_min_output_buffer(myqpskdemod_cb_sptr self, int port, long min_output_buffer)
        """
        return _cpptutorial_swig.myqpskdemod_cb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(myqpskdemod_cb_sptr self) -> float"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(myqpskdemod_cb_sptr self) -> float"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(myqpskdemod_cb_sptr self) -> float"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(myqpskdemod_cb_sptr self) -> float"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(myqpskdemod_cb_sptr self) -> float"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(myqpskdemod_cb_sptr self) -> float"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(myqpskdemod_cb_sptr self, int which) -> float
        pc_input_buffers_full(myqpskdemod_cb_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(myqpskdemod_cb_sptr self, int which) -> float
        pc_input_buffers_full_avg(myqpskdemod_cb_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(myqpskdemod_cb_sptr self, int which) -> float
        pc_input_buffers_full_var(myqpskdemod_cb_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(myqpskdemod_cb_sptr self, int which) -> float
        pc_output_buffers_full(myqpskdemod_cb_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(myqpskdemod_cb_sptr self, int which) -> float
        pc_output_buffers_full_avg(myqpskdemod_cb_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(myqpskdemod_cb_sptr self, int which) -> float
        pc_output_buffers_full_var(myqpskdemod_cb_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(myqpskdemod_cb_sptr self) -> float"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(myqpskdemod_cb_sptr self) -> float"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(myqpskdemod_cb_sptr self) -> float"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(myqpskdemod_cb_sptr self) -> float"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(myqpskdemod_cb_sptr self) -> float"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(myqpskdemod_cb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(myqpskdemod_cb_sptr self)"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(myqpskdemod_cb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(myqpskdemod_cb_sptr self) -> int"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(myqpskdemod_cb_sptr self) -> int"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(myqpskdemod_cb_sptr self, int priority) -> int"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(myqpskdemod_cb_sptr self) -> std::string"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(myqpskdemod_cb_sptr self) -> std::string"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(myqpskdemod_cb_sptr self) -> io_signature_sptr"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(myqpskdemod_cb_sptr self) -> io_signature_sptr"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(myqpskdemod_cb_sptr self) -> long"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(myqpskdemod_cb_sptr self) -> basic_block_sptr"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(myqpskdemod_cb_sptr self, int ninputs, int noutputs) -> bool"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(myqpskdemod_cb_sptr self) -> std::string"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(myqpskdemod_cb_sptr self, std::string name)"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(myqpskdemod_cb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(myqpskdemod_cb_sptr self) -> swig_int_ptr"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(myqpskdemod_cb_sptr self) -> swig_int_ptr"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(myqpskdemod_cb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _cpptutorial_swig.myqpskdemod_cb_sptr_message_subscribers(self, *args, **kwargs)

myqpskdemod_cb_sptr_swigregister = _cpptutorial_swig.myqpskdemod_cb_sptr_swigregister
myqpskdemod_cb_sptr_swigregister(myqpskdemod_cb_sptr)

myqpskdemod_cb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
myqpskdemod_cb = myqpskdemod_cb.make;

class cpptest1(object):
    """Proxy of C++ gr::cpptutorial::cpptest1 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> cpptest1_sptr"""
        return _cpptutorial_swig.cpptest1_make()

    make = staticmethod(make)
    __swig_destroy__ = _cpptutorial_swig.delete_cpptest1
    __del__ = lambda self : None;
cpptest1_swigregister = _cpptutorial_swig.cpptest1_swigregister
cpptest1_swigregister(cpptest1)

def cpptest1_make():
  """cpptest1_make() -> cpptest1_sptr"""
  return _cpptutorial_swig.cpptest1_make()

class cpptest1_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::cpptutorial::cpptest1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::cpptutorial::cpptest1)> self) -> cpptest1_sptr
        __init__(boost::shared_ptr<(gr::cpptutorial::cpptest1)> self, cpptest1 p) -> cpptest1_sptr
        """
        this = _cpptutorial_swig.new_cpptest1_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(cpptest1_sptr self) -> cpptest1"""
        return _cpptutorial_swig.cpptest1_sptr___deref__(self)

    __swig_destroy__ = _cpptutorial_swig.delete_cpptest1_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(cpptest1_sptr self) -> cpptest1_sptr"""
        return _cpptutorial_swig.cpptest1_sptr_make(self)

    def history(self):
        """history(cpptest1_sptr self) -> unsigned int"""
        return _cpptutorial_swig.cpptest1_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(cpptest1_sptr self, int which, int delay)
        declare_sample_delay(cpptest1_sptr self, unsigned int delay)
        """
        return _cpptutorial_swig.cpptest1_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(cpptest1_sptr self, int which) -> unsigned int"""
        return _cpptutorial_swig.cpptest1_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(cpptest1_sptr self) -> int"""
        return _cpptutorial_swig.cpptest1_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(cpptest1_sptr self) -> double"""
        return _cpptutorial_swig.cpptest1_sptr_relative_rate(self)

    def start(self):
        """start(cpptest1_sptr self) -> bool"""
        return _cpptutorial_swig.cpptest1_sptr_start(self)

    def stop(self):
        """stop(cpptest1_sptr self) -> bool"""
        return _cpptutorial_swig.cpptest1_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(cpptest1_sptr self, unsigned int which_input) -> uint64_t"""
        return _cpptutorial_swig.cpptest1_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(cpptest1_sptr self, unsigned int which_output) -> uint64_t"""
        return _cpptutorial_swig.cpptest1_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(cpptest1_sptr self) -> int"""
        return _cpptutorial_swig.cpptest1_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(cpptest1_sptr self, int m)"""
        return _cpptutorial_swig.cpptest1_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(cpptest1_sptr self)"""
        return _cpptutorial_swig.cpptest1_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(cpptest1_sptr self) -> bool"""
        return _cpptutorial_swig.cpptest1_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(cpptest1_sptr self, int m)"""
        return _cpptutorial_swig.cpptest1_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(cpptest1_sptr self) -> int"""
        return _cpptutorial_swig.cpptest1_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(cpptest1_sptr self, int i) -> long"""
        return _cpptutorial_swig.cpptest1_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(cpptest1_sptr self, long max_output_buffer)
        set_max_output_buffer(cpptest1_sptr self, int port, long max_output_buffer)
        """
        return _cpptutorial_swig.cpptest1_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(cpptest1_sptr self, int i) -> long"""
        return _cpptutorial_swig.cpptest1_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(cpptest1_sptr self, long min_output_buffer)
        set_min_output_buffer(cpptest1_sptr self, int port, long min_output_buffer)
        """
        return _cpptutorial_swig.cpptest1_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(cpptest1_sptr self) -> float"""
        return _cpptutorial_swig.cpptest1_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(cpptest1_sptr self) -> float"""
        return _cpptutorial_swig.cpptest1_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(cpptest1_sptr self) -> float"""
        return _cpptutorial_swig.cpptest1_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(cpptest1_sptr self) -> float"""
        return _cpptutorial_swig.cpptest1_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(cpptest1_sptr self) -> float"""
        return _cpptutorial_swig.cpptest1_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(cpptest1_sptr self) -> float"""
        return _cpptutorial_swig.cpptest1_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(cpptest1_sptr self, int which) -> float
        pc_input_buffers_full(cpptest1_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.cpptest1_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(cpptest1_sptr self, int which) -> float
        pc_input_buffers_full_avg(cpptest1_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.cpptest1_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(cpptest1_sptr self, int which) -> float
        pc_input_buffers_full_var(cpptest1_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.cpptest1_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(cpptest1_sptr self, int which) -> float
        pc_output_buffers_full(cpptest1_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.cpptest1_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(cpptest1_sptr self, int which) -> float
        pc_output_buffers_full_avg(cpptest1_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.cpptest1_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(cpptest1_sptr self, int which) -> float
        pc_output_buffers_full_var(cpptest1_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.cpptest1_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(cpptest1_sptr self) -> float"""
        return _cpptutorial_swig.cpptest1_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(cpptest1_sptr self) -> float"""
        return _cpptutorial_swig.cpptest1_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(cpptest1_sptr self) -> float"""
        return _cpptutorial_swig.cpptest1_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(cpptest1_sptr self) -> float"""
        return _cpptutorial_swig.cpptest1_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(cpptest1_sptr self) -> float"""
        return _cpptutorial_swig.cpptest1_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(cpptest1_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _cpptutorial_swig.cpptest1_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(cpptest1_sptr self)"""
        return _cpptutorial_swig.cpptest1_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(cpptest1_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _cpptutorial_swig.cpptest1_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(cpptest1_sptr self) -> int"""
        return _cpptutorial_swig.cpptest1_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(cpptest1_sptr self) -> int"""
        return _cpptutorial_swig.cpptest1_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(cpptest1_sptr self, int priority) -> int"""
        return _cpptutorial_swig.cpptest1_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(cpptest1_sptr self) -> std::string"""
        return _cpptutorial_swig.cpptest1_sptr_name(self)

    def symbol_name(self):
        """symbol_name(cpptest1_sptr self) -> std::string"""
        return _cpptutorial_swig.cpptest1_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(cpptest1_sptr self) -> io_signature_sptr"""
        return _cpptutorial_swig.cpptest1_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(cpptest1_sptr self) -> io_signature_sptr"""
        return _cpptutorial_swig.cpptest1_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(cpptest1_sptr self) -> long"""
        return _cpptutorial_swig.cpptest1_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(cpptest1_sptr self) -> basic_block_sptr"""
        return _cpptutorial_swig.cpptest1_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(cpptest1_sptr self, int ninputs, int noutputs) -> bool"""
        return _cpptutorial_swig.cpptest1_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(cpptest1_sptr self) -> std::string"""
        return _cpptutorial_swig.cpptest1_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(cpptest1_sptr self, std::string name)"""
        return _cpptutorial_swig.cpptest1_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(cpptest1_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _cpptutorial_swig.cpptest1_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(cpptest1_sptr self) -> swig_int_ptr"""
        return _cpptutorial_swig.cpptest1_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(cpptest1_sptr self) -> swig_int_ptr"""
        return _cpptutorial_swig.cpptest1_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(cpptest1_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _cpptutorial_swig.cpptest1_sptr_message_subscribers(self, *args, **kwargs)

cpptest1_sptr_swigregister = _cpptutorial_swig.cpptest1_sptr_swigregister
cpptest1_sptr_swigregister(cpptest1_sptr)

cpptest1_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cpptest1 = cpptest1.make;

class cppderivative(object):
    """Proxy of C++ gr::cpptutorial::cppderivative class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> cppderivative_sptr"""
        return _cpptutorial_swig.cppderivative_make()

    make = staticmethod(make)
    __swig_destroy__ = _cpptutorial_swig.delete_cppderivative
    __del__ = lambda self : None;
cppderivative_swigregister = _cpptutorial_swig.cppderivative_swigregister
cppderivative_swigregister(cppderivative)

def cppderivative_make():
  """cppderivative_make() -> cppderivative_sptr"""
  return _cpptutorial_swig.cppderivative_make()

class cppderivative_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::cpptutorial::cppderivative)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::cpptutorial::cppderivative)> self) -> cppderivative_sptr
        __init__(boost::shared_ptr<(gr::cpptutorial::cppderivative)> self, cppderivative p) -> cppderivative_sptr
        """
        this = _cpptutorial_swig.new_cppderivative_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(cppderivative_sptr self) -> cppderivative"""
        return _cpptutorial_swig.cppderivative_sptr___deref__(self)

    __swig_destroy__ = _cpptutorial_swig.delete_cppderivative_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(cppderivative_sptr self) -> cppderivative_sptr"""
        return _cpptutorial_swig.cppderivative_sptr_make(self)

    def history(self):
        """history(cppderivative_sptr self) -> unsigned int"""
        return _cpptutorial_swig.cppderivative_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(cppderivative_sptr self, int which, int delay)
        declare_sample_delay(cppderivative_sptr self, unsigned int delay)
        """
        return _cpptutorial_swig.cppderivative_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(cppderivative_sptr self, int which) -> unsigned int"""
        return _cpptutorial_swig.cppderivative_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(cppderivative_sptr self) -> int"""
        return _cpptutorial_swig.cppderivative_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(cppderivative_sptr self) -> double"""
        return _cpptutorial_swig.cppderivative_sptr_relative_rate(self)

    def start(self):
        """start(cppderivative_sptr self) -> bool"""
        return _cpptutorial_swig.cppderivative_sptr_start(self)

    def stop(self):
        """stop(cppderivative_sptr self) -> bool"""
        return _cpptutorial_swig.cppderivative_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(cppderivative_sptr self, unsigned int which_input) -> uint64_t"""
        return _cpptutorial_swig.cppderivative_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(cppderivative_sptr self, unsigned int which_output) -> uint64_t"""
        return _cpptutorial_swig.cppderivative_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(cppderivative_sptr self) -> int"""
        return _cpptutorial_swig.cppderivative_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(cppderivative_sptr self, int m)"""
        return _cpptutorial_swig.cppderivative_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(cppderivative_sptr self)"""
        return _cpptutorial_swig.cppderivative_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(cppderivative_sptr self) -> bool"""
        return _cpptutorial_swig.cppderivative_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(cppderivative_sptr self, int m)"""
        return _cpptutorial_swig.cppderivative_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(cppderivative_sptr self) -> int"""
        return _cpptutorial_swig.cppderivative_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(cppderivative_sptr self, int i) -> long"""
        return _cpptutorial_swig.cppderivative_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(cppderivative_sptr self, long max_output_buffer)
        set_max_output_buffer(cppderivative_sptr self, int port, long max_output_buffer)
        """
        return _cpptutorial_swig.cppderivative_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(cppderivative_sptr self, int i) -> long"""
        return _cpptutorial_swig.cppderivative_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(cppderivative_sptr self, long min_output_buffer)
        set_min_output_buffer(cppderivative_sptr self, int port, long min_output_buffer)
        """
        return _cpptutorial_swig.cppderivative_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(cppderivative_sptr self) -> float"""
        return _cpptutorial_swig.cppderivative_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(cppderivative_sptr self) -> float"""
        return _cpptutorial_swig.cppderivative_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(cppderivative_sptr self) -> float"""
        return _cpptutorial_swig.cppderivative_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(cppderivative_sptr self) -> float"""
        return _cpptutorial_swig.cppderivative_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(cppderivative_sptr self) -> float"""
        return _cpptutorial_swig.cppderivative_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(cppderivative_sptr self) -> float"""
        return _cpptutorial_swig.cppderivative_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(cppderivative_sptr self, int which) -> float
        pc_input_buffers_full(cppderivative_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.cppderivative_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(cppderivative_sptr self, int which) -> float
        pc_input_buffers_full_avg(cppderivative_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.cppderivative_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(cppderivative_sptr self, int which) -> float
        pc_input_buffers_full_var(cppderivative_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.cppderivative_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(cppderivative_sptr self, int which) -> float
        pc_output_buffers_full(cppderivative_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.cppderivative_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(cppderivative_sptr self, int which) -> float
        pc_output_buffers_full_avg(cppderivative_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.cppderivative_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(cppderivative_sptr self, int which) -> float
        pc_output_buffers_full_var(cppderivative_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.cppderivative_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(cppderivative_sptr self) -> float"""
        return _cpptutorial_swig.cppderivative_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(cppderivative_sptr self) -> float"""
        return _cpptutorial_swig.cppderivative_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(cppderivative_sptr self) -> float"""
        return _cpptutorial_swig.cppderivative_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(cppderivative_sptr self) -> float"""
        return _cpptutorial_swig.cppderivative_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(cppderivative_sptr self) -> float"""
        return _cpptutorial_swig.cppderivative_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(cppderivative_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _cpptutorial_swig.cppderivative_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(cppderivative_sptr self)"""
        return _cpptutorial_swig.cppderivative_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(cppderivative_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _cpptutorial_swig.cppderivative_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(cppderivative_sptr self) -> int"""
        return _cpptutorial_swig.cppderivative_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(cppderivative_sptr self) -> int"""
        return _cpptutorial_swig.cppderivative_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(cppderivative_sptr self, int priority) -> int"""
        return _cpptutorial_swig.cppderivative_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(cppderivative_sptr self) -> std::string"""
        return _cpptutorial_swig.cppderivative_sptr_name(self)

    def symbol_name(self):
        """symbol_name(cppderivative_sptr self) -> std::string"""
        return _cpptutorial_swig.cppderivative_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(cppderivative_sptr self) -> io_signature_sptr"""
        return _cpptutorial_swig.cppderivative_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(cppderivative_sptr self) -> io_signature_sptr"""
        return _cpptutorial_swig.cppderivative_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(cppderivative_sptr self) -> long"""
        return _cpptutorial_swig.cppderivative_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(cppderivative_sptr self) -> basic_block_sptr"""
        return _cpptutorial_swig.cppderivative_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(cppderivative_sptr self, int ninputs, int noutputs) -> bool"""
        return _cpptutorial_swig.cppderivative_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(cppderivative_sptr self) -> std::string"""
        return _cpptutorial_swig.cppderivative_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(cppderivative_sptr self, std::string name)"""
        return _cpptutorial_swig.cppderivative_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(cppderivative_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _cpptutorial_swig.cppderivative_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(cppderivative_sptr self) -> swig_int_ptr"""
        return _cpptutorial_swig.cppderivative_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(cppderivative_sptr self) -> swig_int_ptr"""
        return _cpptutorial_swig.cppderivative_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(cppderivative_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _cpptutorial_swig.cppderivative_sptr_message_subscribers(self, *args, **kwargs)

cppderivative_sptr_swigregister = _cpptutorial_swig.cppderivative_sptr_swigregister
cppderivative_sptr_swigregister(cppderivative_sptr)

cppderivative_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cppderivative = cppderivative.make;

class derivative_ff(object):
    """Proxy of C++ gr::cpptutorial::derivative_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int nfilt) -> derivative_ff_sptr"""
        return _cpptutorial_swig.derivative_ff_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _cpptutorial_swig.delete_derivative_ff
    __del__ = lambda self : None;
derivative_ff_swigregister = _cpptutorial_swig.derivative_ff_swigregister
derivative_ff_swigregister(derivative_ff)

def derivative_ff_make(*args, **kwargs):
  """derivative_ff_make(int nfilt) -> derivative_ff_sptr"""
  return _cpptutorial_swig.derivative_ff_make(*args, **kwargs)

class derivative_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::cpptutorial::derivative_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::cpptutorial::derivative_ff)> self) -> derivative_ff_sptr
        __init__(boost::shared_ptr<(gr::cpptutorial::derivative_ff)> self, derivative_ff p) -> derivative_ff_sptr
        """
        this = _cpptutorial_swig.new_derivative_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(derivative_ff_sptr self) -> derivative_ff"""
        return _cpptutorial_swig.derivative_ff_sptr___deref__(self)

    __swig_destroy__ = _cpptutorial_swig.delete_derivative_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(derivative_ff_sptr self, int nfilt) -> derivative_ff_sptr"""
        return _cpptutorial_swig.derivative_ff_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(derivative_ff_sptr self) -> unsigned int"""
        return _cpptutorial_swig.derivative_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(derivative_ff_sptr self, int which, int delay)
        declare_sample_delay(derivative_ff_sptr self, unsigned int delay)
        """
        return _cpptutorial_swig.derivative_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(derivative_ff_sptr self, int which) -> unsigned int"""
        return _cpptutorial_swig.derivative_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(derivative_ff_sptr self) -> int"""
        return _cpptutorial_swig.derivative_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(derivative_ff_sptr self) -> double"""
        return _cpptutorial_swig.derivative_ff_sptr_relative_rate(self)

    def start(self):
        """start(derivative_ff_sptr self) -> bool"""
        return _cpptutorial_swig.derivative_ff_sptr_start(self)

    def stop(self):
        """stop(derivative_ff_sptr self) -> bool"""
        return _cpptutorial_swig.derivative_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(derivative_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _cpptutorial_swig.derivative_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(derivative_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _cpptutorial_swig.derivative_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(derivative_ff_sptr self) -> int"""
        return _cpptutorial_swig.derivative_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(derivative_ff_sptr self, int m)"""
        return _cpptutorial_swig.derivative_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(derivative_ff_sptr self)"""
        return _cpptutorial_swig.derivative_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(derivative_ff_sptr self) -> bool"""
        return _cpptutorial_swig.derivative_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(derivative_ff_sptr self, int m)"""
        return _cpptutorial_swig.derivative_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(derivative_ff_sptr self) -> int"""
        return _cpptutorial_swig.derivative_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(derivative_ff_sptr self, int i) -> long"""
        return _cpptutorial_swig.derivative_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(derivative_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(derivative_ff_sptr self, int port, long max_output_buffer)
        """
        return _cpptutorial_swig.derivative_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(derivative_ff_sptr self, int i) -> long"""
        return _cpptutorial_swig.derivative_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(derivative_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(derivative_ff_sptr self, int port, long min_output_buffer)
        """
        return _cpptutorial_swig.derivative_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(derivative_ff_sptr self) -> float"""
        return _cpptutorial_swig.derivative_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(derivative_ff_sptr self) -> float"""
        return _cpptutorial_swig.derivative_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(derivative_ff_sptr self) -> float"""
        return _cpptutorial_swig.derivative_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(derivative_ff_sptr self) -> float"""
        return _cpptutorial_swig.derivative_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(derivative_ff_sptr self) -> float"""
        return _cpptutorial_swig.derivative_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(derivative_ff_sptr self) -> float"""
        return _cpptutorial_swig.derivative_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(derivative_ff_sptr self, int which) -> float
        pc_input_buffers_full(derivative_ff_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.derivative_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(derivative_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(derivative_ff_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.derivative_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(derivative_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(derivative_ff_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.derivative_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(derivative_ff_sptr self, int which) -> float
        pc_output_buffers_full(derivative_ff_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.derivative_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(derivative_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(derivative_ff_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.derivative_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(derivative_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(derivative_ff_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.derivative_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(derivative_ff_sptr self) -> float"""
        return _cpptutorial_swig.derivative_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(derivative_ff_sptr self) -> float"""
        return _cpptutorial_swig.derivative_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(derivative_ff_sptr self) -> float"""
        return _cpptutorial_swig.derivative_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(derivative_ff_sptr self) -> float"""
        return _cpptutorial_swig.derivative_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(derivative_ff_sptr self) -> float"""
        return _cpptutorial_swig.derivative_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(derivative_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _cpptutorial_swig.derivative_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(derivative_ff_sptr self)"""
        return _cpptutorial_swig.derivative_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(derivative_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _cpptutorial_swig.derivative_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(derivative_ff_sptr self) -> int"""
        return _cpptutorial_swig.derivative_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(derivative_ff_sptr self) -> int"""
        return _cpptutorial_swig.derivative_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(derivative_ff_sptr self, int priority) -> int"""
        return _cpptutorial_swig.derivative_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(derivative_ff_sptr self) -> std::string"""
        return _cpptutorial_swig.derivative_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(derivative_ff_sptr self) -> std::string"""
        return _cpptutorial_swig.derivative_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(derivative_ff_sptr self) -> io_signature_sptr"""
        return _cpptutorial_swig.derivative_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(derivative_ff_sptr self) -> io_signature_sptr"""
        return _cpptutorial_swig.derivative_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(derivative_ff_sptr self) -> long"""
        return _cpptutorial_swig.derivative_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(derivative_ff_sptr self) -> basic_block_sptr"""
        return _cpptutorial_swig.derivative_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(derivative_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _cpptutorial_swig.derivative_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(derivative_ff_sptr self) -> std::string"""
        return _cpptutorial_swig.derivative_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(derivative_ff_sptr self, std::string name)"""
        return _cpptutorial_swig.derivative_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(derivative_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _cpptutorial_swig.derivative_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(derivative_ff_sptr self) -> swig_int_ptr"""
        return _cpptutorial_swig.derivative_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(derivative_ff_sptr self) -> swig_int_ptr"""
        return _cpptutorial_swig.derivative_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(derivative_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _cpptutorial_swig.derivative_ff_sptr_message_subscribers(self, *args, **kwargs)

derivative_ff_sptr_swigregister = _cpptutorial_swig.derivative_ff_sptr_swigregister
derivative_ff_sptr_swigregister(derivative_ff_sptr)

derivative_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
derivative_ff = derivative_ff.make;

class wil_polyclock1(object):
    """Proxy of C++ gr::cpptutorial::wil_polyclock1 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(double sps, float lpbw, pmt_vector_float taps, unsigned int filter_size, float ini_phase, 
            float max_rdev, int outsps) -> wil_polyclock1_sptr
        """
        return _cpptutorial_swig.wil_polyclock1_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _cpptutorial_swig.delete_wil_polyclock1
    __del__ = lambda self : None;
wil_polyclock1_swigregister = _cpptutorial_swig.wil_polyclock1_swigregister
wil_polyclock1_swigregister(wil_polyclock1)

def wil_polyclock1_make(*args, **kwargs):
  """
    wil_polyclock1_make(double sps, float lpbw, pmt_vector_float taps, unsigned int filter_size, float ini_phase, 
        float max_rdev, int outsps) -> wil_polyclock1_sptr
    """
  return _cpptutorial_swig.wil_polyclock1_make(*args, **kwargs)

class wil_polyclock1_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::cpptutorial::wil_polyclock1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::cpptutorial::wil_polyclock1)> self) -> wil_polyclock1_sptr
        __init__(boost::shared_ptr<(gr::cpptutorial::wil_polyclock1)> self, wil_polyclock1 p) -> wil_polyclock1_sptr
        """
        this = _cpptutorial_swig.new_wil_polyclock1_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(wil_polyclock1_sptr self) -> wil_polyclock1"""
        return _cpptutorial_swig.wil_polyclock1_sptr___deref__(self)

    __swig_destroy__ = _cpptutorial_swig.delete_wil_polyclock1_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(wil_polyclock1_sptr self, double sps, float lpbw, pmt_vector_float taps, unsigned int filter_size, float ini_phase, 
            float max_rdev, int outsps) -> wil_polyclock1_sptr
        """
        return _cpptutorial_swig.wil_polyclock1_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(wil_polyclock1_sptr self) -> unsigned int"""
        return _cpptutorial_swig.wil_polyclock1_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(wil_polyclock1_sptr self, int which, int delay)
        declare_sample_delay(wil_polyclock1_sptr self, unsigned int delay)
        """
        return _cpptutorial_swig.wil_polyclock1_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(wil_polyclock1_sptr self, int which) -> unsigned int"""
        return _cpptutorial_swig.wil_polyclock1_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(wil_polyclock1_sptr self) -> int"""
        return _cpptutorial_swig.wil_polyclock1_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(wil_polyclock1_sptr self) -> double"""
        return _cpptutorial_swig.wil_polyclock1_sptr_relative_rate(self)

    def start(self):
        """start(wil_polyclock1_sptr self) -> bool"""
        return _cpptutorial_swig.wil_polyclock1_sptr_start(self)

    def stop(self):
        """stop(wil_polyclock1_sptr self) -> bool"""
        return _cpptutorial_swig.wil_polyclock1_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(wil_polyclock1_sptr self, unsigned int which_input) -> uint64_t"""
        return _cpptutorial_swig.wil_polyclock1_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(wil_polyclock1_sptr self, unsigned int which_output) -> uint64_t"""
        return _cpptutorial_swig.wil_polyclock1_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(wil_polyclock1_sptr self) -> int"""
        return _cpptutorial_swig.wil_polyclock1_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(wil_polyclock1_sptr self, int m)"""
        return _cpptutorial_swig.wil_polyclock1_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(wil_polyclock1_sptr self)"""
        return _cpptutorial_swig.wil_polyclock1_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(wil_polyclock1_sptr self) -> bool"""
        return _cpptutorial_swig.wil_polyclock1_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(wil_polyclock1_sptr self, int m)"""
        return _cpptutorial_swig.wil_polyclock1_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(wil_polyclock1_sptr self) -> int"""
        return _cpptutorial_swig.wil_polyclock1_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(wil_polyclock1_sptr self, int i) -> long"""
        return _cpptutorial_swig.wil_polyclock1_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(wil_polyclock1_sptr self, long max_output_buffer)
        set_max_output_buffer(wil_polyclock1_sptr self, int port, long max_output_buffer)
        """
        return _cpptutorial_swig.wil_polyclock1_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(wil_polyclock1_sptr self, int i) -> long"""
        return _cpptutorial_swig.wil_polyclock1_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(wil_polyclock1_sptr self, long min_output_buffer)
        set_min_output_buffer(wil_polyclock1_sptr self, int port, long min_output_buffer)
        """
        return _cpptutorial_swig.wil_polyclock1_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(wil_polyclock1_sptr self) -> float"""
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(wil_polyclock1_sptr self) -> float"""
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(wil_polyclock1_sptr self) -> float"""
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(wil_polyclock1_sptr self) -> float"""
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(wil_polyclock1_sptr self) -> float"""
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(wil_polyclock1_sptr self) -> float"""
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(wil_polyclock1_sptr self, int which) -> float
        pc_input_buffers_full(wil_polyclock1_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(wil_polyclock1_sptr self, int which) -> float
        pc_input_buffers_full_avg(wil_polyclock1_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(wil_polyclock1_sptr self, int which) -> float
        pc_input_buffers_full_var(wil_polyclock1_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(wil_polyclock1_sptr self, int which) -> float
        pc_output_buffers_full(wil_polyclock1_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(wil_polyclock1_sptr self, int which) -> float
        pc_output_buffers_full_avg(wil_polyclock1_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(wil_polyclock1_sptr self, int which) -> float
        pc_output_buffers_full_var(wil_polyclock1_sptr self) -> pmt_vector_float
        """
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(wil_polyclock1_sptr self) -> float"""
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(wil_polyclock1_sptr self) -> float"""
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(wil_polyclock1_sptr self) -> float"""
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(wil_polyclock1_sptr self) -> float"""
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(wil_polyclock1_sptr self) -> float"""
        return _cpptutorial_swig.wil_polyclock1_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(wil_polyclock1_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _cpptutorial_swig.wil_polyclock1_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(wil_polyclock1_sptr self)"""
        return _cpptutorial_swig.wil_polyclock1_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(wil_polyclock1_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _cpptutorial_swig.wil_polyclock1_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(wil_polyclock1_sptr self) -> int"""
        return _cpptutorial_swig.wil_polyclock1_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(wil_polyclock1_sptr self) -> int"""
        return _cpptutorial_swig.wil_polyclock1_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(wil_polyclock1_sptr self, int priority) -> int"""
        return _cpptutorial_swig.wil_polyclock1_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(wil_polyclock1_sptr self) -> std::string"""
        return _cpptutorial_swig.wil_polyclock1_sptr_name(self)

    def symbol_name(self):
        """symbol_name(wil_polyclock1_sptr self) -> std::string"""
        return _cpptutorial_swig.wil_polyclock1_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(wil_polyclock1_sptr self) -> io_signature_sptr"""
        return _cpptutorial_swig.wil_polyclock1_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(wil_polyclock1_sptr self) -> io_signature_sptr"""
        return _cpptutorial_swig.wil_polyclock1_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(wil_polyclock1_sptr self) -> long"""
        return _cpptutorial_swig.wil_polyclock1_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(wil_polyclock1_sptr self) -> basic_block_sptr"""
        return _cpptutorial_swig.wil_polyclock1_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(wil_polyclock1_sptr self, int ninputs, int noutputs) -> bool"""
        return _cpptutorial_swig.wil_polyclock1_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(wil_polyclock1_sptr self) -> std::string"""
        return _cpptutorial_swig.wil_polyclock1_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(wil_polyclock1_sptr self, std::string name)"""
        return _cpptutorial_swig.wil_polyclock1_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(wil_polyclock1_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _cpptutorial_swig.wil_polyclock1_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(wil_polyclock1_sptr self) -> swig_int_ptr"""
        return _cpptutorial_swig.wil_polyclock1_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(wil_polyclock1_sptr self) -> swig_int_ptr"""
        return _cpptutorial_swig.wil_polyclock1_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(wil_polyclock1_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _cpptutorial_swig.wil_polyclock1_sptr_message_subscribers(self, *args, **kwargs)

wil_polyclock1_sptr_swigregister = _cpptutorial_swig.wil_polyclock1_sptr_swigregister
wil_polyclock1_sptr_swigregister(wil_polyclock1_sptr)

wil_polyclock1_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
wil_polyclock1 = wil_polyclock1.make;



